generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ENUMS
//
enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum TeamMemberStatus {
  PENDING
  ACCEPTED
  REJECTED
}

//
// MODELS
//
model User {
  user_id      String  @id @unique
  displayName  String
  email        String  @unique
  photo        String?
  gender       String?
  passwordHash String
  location     String?

  // relations
  teams               TeamMember[]
  invitationsSent     Invitation[]     @relation("InvitationsSent")
  invitationsReceived Invitation[]     @relation("InvitationsReceived")
  tournaments         TournamentTeam[] @relation("UserTournamentTeams")
  preferredGames      UserGame[]
  messages            Message[]

  // teams/tournaments created by user
  createdTeams       Team[]       @relation("TeamCreator")
  createdTournaments Tournament[] @relation("TournamentCreator")
}

model Game {
  name        String       @id
  teams       Team[]
  users       UserGame[]
  tournaments Tournament[]
}

model Team {
  id          String  @id @default(uuid())
  title       String
  photo       String?
  description String?

  creatorId String
  creator   User   @relation("TeamCreator", fields: [creatorId], references: [user_id])

  gameName String
  game     Game   @relation(fields: [gameName], references: [name])

  members     TeamMember[]
  tournaments TournamentTeam[]
  invitations Invitation[]
  messages    Message[]
}

model TeamMember {
  id       String           @id @default(uuid())
  userId   String
  teamId   String
  status   TeamMemberStatus @default(PENDING)
  joinedAt DateTime         @default(now())

  user User @relation(fields: [userId], references: [user_id])
  team Team @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId]) // Prevent duplicate membership
}

model Tournament {
  id          String  @id @default(uuid())
  title       String
  description String?

  creatorId String
  creator   User   @relation("TournamentCreator", fields: [creatorId], references: [user_id])

  gameId String
  game   Game   @relation(fields: [gameId], references: [name])

  photo     String?
  startDate DateTime
  location  String

  teams    TournamentTeam[]
  messages Message[]
}

model TournamentTeam {
  id           String   @id @default(uuid())
  tournamentId String
  teamId       String
  registeredAt DateTime @default(now())

  tournament Tournament @relation(fields: [tournamentId], references: [id])
  team       Team       @relation(fields: [teamId], references: [id])
  users      User[]     @relation("UserTournamentTeams")

  @@unique([tournamentId, teamId]) // Prevent duplicate registration
}

model Invitation {
  id         String           @id @default(uuid())
  fromUserId String
  toUserId   String
  teamId     String
  status     InvitationStatus @default(PENDING)
  sentAt     DateTime         @default(now())

  fromUser User @relation("InvitationsSent", fields: [fromUserId], references: [user_id])
  toUser   User @relation("InvitationsReceived", fields: [toUserId], references: [user_id])
  team     Team @relation(fields: [teamId], references: [id])
}

model UserGame {
  id     String @id @default(uuid())
  userId String
  gameName String

  user User @relation(fields: [userId], references: [user_id])
  game Game @relation(fields: [gameName], references: [name])

  @@unique([userId, gameName]) // Prevent duplicate preferences
}

model Message {
  id           String   @id @default(uuid())
  senderId     String
  teamId       String?
  tournamentId String?
  content      String
  sentAt       DateTime @default(now())

  sender     User        @relation(fields: [senderId], references: [user_id])
  team       Team?       @relation(fields: [teamId], references: [id])
  tournament Tournament? @relation(fields: [tournamentId], references: [id])
}
